{"version":3,"sources":["nomina.js","../src/preact.js","../src/index.js","../node_modules/dlv/index.js","ComponenteNomina/CrearNomina.js","ComponenteNomina/GenerarPeriodo.js","ComponenteNomina/NominaTrabajador.js","ComponenteNomina/ingresosNoFijos.js","ComponenteNomina/Deduccion.js","ComponenteNomina/TrabajadorNomina.js","ComponenteNomina/ContenedorNomina.js"],"names":["CrearNomina","GenerarPeriodo","NominaTrabajador","IngresosNoFijos","DeduccionNoFija","TrabajadorNomina","ComponenteNomina","document"],"mappings":"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","file":"nomina.map","sourceRoot":"","sourcesContent":["import { render, h } from 'preact'\nimport Contenedor from './ComponenteNomina/ContenedorNomina'\nconst rootElement = document.querySelector('#root')\nrender(<Contenedor />, rootElement);","import { h, h as createElement } from './h';\nimport { cloneElement } from './clone-element';\nimport { Component } from './component';\nimport { render } from './render';\nimport { rerender } from './render-queue';\nimport options from './options';\n\nfunction createRef() {\n\treturn {};\n}\n\nexport default {\n\th,\n\tcreateElement,\n\tcloneElement,\n\tcreateRef,\n\tComponent,\n\trender,\n\trerender,\n\toptions\n};\n\nexport {\n\th,\n\tcreateElement,\n\tcloneElement,\n\tcreateRef,\n\tComponent,\n\trender,\n\trerender,\n\toptions\n};\n","import delve from 'dlv';\n\n/** Create an Event handler function that sets a given state property.\n *\t@param {Component} component\tThe component whose state should be updated\n *\t@param {string} key\t\t\t\tA dot-notated key path to update in the component's state\n *\t@param {string} eventPath\t\tA dot-notated key path to the value that should be retrieved from the Event or component\n *\t@returns {function} linkedStateHandler\n */\nexport default function linkState(component, key, eventPath) {\n\tlet path = key.split('.'),\n\t\tcache = component.__lsc || (component.__lsc = {});\n\n\treturn cache[key+eventPath] || (cache[key+eventPath] = function(e) {\n\t\tlet t = e && e.target || this,\n\t\t\tstate = {},\n\t\t\tobj = state,\n\t\t\tv = typeof eventPath==='string' ? delve(e, eventPath) : t.nodeName ? (t.type.match(/^che|rad/) ? t.checked : t.value) : e,\n\t\t\ti = 0;\n\t\tfor ( ; i<path.length-1; i++) {\n\t\t\tobj = obj[path[i]] || (obj[path[i]] = !i && component.state[path[i]] || {});\n\t\t}\n\t\tobj[path[i]] = v;\n\t\tcomponent.setState(state);\n\t});\n}\n","export default function dlv(obj, key, def, p) {\n\tp = 0;\n\tkey = key.split ? key.split('.') : key;\n\twhile (obj && p<key.length) obj = obj[key[p++]];\n\treturn obj===undefined ? def : obj;\n}","import { Component, h } from \"preact\";\nimport linkSate from 'linkstate'\n\nclass CrearNomina extends Component {\n  constructor() {\n    super();\n    this.state = {\n      frecuenciasDePago: [],\n      frecuenciaSeleccionada: ''\n    }\n    this.seleccionFrecuenciaPago = this.seleccionFrecuenciaPago.bind(this)\n  }\n\n  componentDidMount() {\n    fetch(\"http://localhost:3000/api/frecuenciaDePago\")\n      .then(res => res.json())\n      .then(frecuenciasDePago => {\n        this.setState({ frecuenciasDePago })\n      })\n      .catch(e => console.log(e))\n  }\n\n  seleccionFrecuenciaPago(e) {\n    this.props.setFrecuencia(e.target.value)\n  }\n  render(props, { frecuenciasDePago, frecuenciaSeleccionada }) {\n    console.log(frecuenciasDePago)\n    console.log(frecuenciaSeleccionada)\n    return (\n      <div>\n        <h1> Crear Nomina</h1>\n        <span>Seleccione la frecuencia de Pago </span>\n        {\n          frecuenciasDePago.map(frec =>\n            <button onClick={this.seleccionFrecuenciaPago} value={frec.nombre}>{frec.nombre}</button>)\n        }\n      </div>\n    )\n  }\n}\n\nexport default CrearNomina","import { Component, h } from 'preact'\nimport linkState from 'linkstate'\nclass GenerarPeriodo extends Component {\n  constructor() {\n    super()\n    this.super = {\n      inicioPeriodo: '',\n      finPeriodo: ''\n    }\n    this.generarPeriodoPago = this.generarPeriodoPago.bind(this)\n  }\n\n  generarPeriodoPago() {\n    const { inicioPeriodo, finPeriodo } = this.state\n    const { setPeriodo } = this.props\n    console.log(setPeriodo)\n    console.log(this.props)\n    console.log(\"Voy a hacer un fetch\")\n    fetch(\"http://localhost:3000/api/periodoPago/create\", {\n      method: 'POST',\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(\n        {\n          inicioPeriodo,\n          finPeriodo\n        }\n      )\n    })\n      .then(res => res.json())\n      .then(res => {\n        console.log(res)\n        setPeriodo({ ...res, inicioPeriodo, finPeriodo })\n      })\n      .catch(e => console.log(e))\n  }\n\n  render(props, state) {\n    return (\n      <div>\n        <h1>Seleccion el Periodo de Pago de las nominas</h1>\n        <input type=\"date\" name=\"inicioPeriodo\" onChange={linkState(this, 'inicioPeriodo')}></input>\n        <input type=\"date\" name=\"finPeriodo\" onChange={linkState(this, 'finPeriodo')}></input>\n        <button onClick={this.generarPeriodoPago}>Crear Periodo</button>\n      </div>\n    )\n  }\n\n}\n\nexport default GenerarPeriodo","import { Component, h } from 'preact'\nimport linkState from 'linkstate'\n\nclass NominaTrabajador extends Component {\n  constructor() {\n    super()\n    this.state = {\n      horasTrabajadas: 0,\n      horasExtra: 0,\n      valorVentas: 0\n    }\n    this.crearNomina = this.crearNomina.bind(this)\n  }\n  crearNomina() {\n    const { horasExtra, horasTrabajadas, valorVentas } = this.state\n    this.props.crearNomina({\n      horasExtra: Number.parseFloat(horasExtra), horasTrabajadas: Number.parseFloat(horasTrabajadas), valorVentas: Number.parseFloat(valorVentas)\n    })\n\n  }\n\n\n  render({ porcentajeComision }, { horasExtra, horasTrabajadas, valorVentas }) {\n    return (<div>\n      <label for=\"horasTrabajadas\">Horas Trabajadas</label>\n      <input type=\"number\" name=\"horasTrabajadas\" placeholder=\"Horas Trabajadas\" value={horasTrabajadas} onInput={linkState(this, 'horasTrabajadas')} ></input>\n      <label for=\"horasTrabajadas\">Horas Extra</label>\n      <input type=\"number\" name=\"horasExtra\" placeholder=\"Horas Extra\" value={horasExtra} onInput={linkState(this, 'horasExtra')} ></input>\n      {\n        porcentajeComision &&\n        (\n          <div>\n            <label for=\"horasTrabajadas\">Ventas Realizadas</label>\n            <input type=\"number\" name=\"comision\" placeholder=\"Ventas Realizadas\" value={valorVentas} onInput={linkState(this, 'valorVentas')} ></input>\n          </div>\n        )\n      }\n\n      <button onClick={this.crearNomina}>Siguiente</button>\n\n    </div>)\n  }\n}\n\nexport default NominaTrabajador","import { Component, h } from \"preact\";\nimport linkState from \"linkstate\";\n\nclass IngresosNoFijos extends Component {\n\n  constructor() {\n    super()\n    this.state = {\n      viatico: 0,\n      incentivo: 0\n    }\n    this.handleClick = this.handleClick.bind(this)\n  }\n\n  handleClick() {\n    const { viatico, incentivo } = this.state\n    console.log(\"Viatico\" + viatico)\n    console.log(\"Incentivo \" + incentivo)\n    this.props.crearIngresosNoFijos({\n      viatico: Number.parseFloat(viatico),\n      incentivo: Number.parseFloat(incentivo)\n    })\n  }\n\n  render({ porcentajeComision }) {\n    return (\n      <div>\n        <label for=\"viatico\">Viatico</label>\n        <input name=\"viatico\" type=\"number\" placeholder=\"Viatico\" onChange={linkState(this, 'viatico')} />\n        <label for=\"incentivo\">Incentivo</label>\n        <input name=\"incentivo\" type=\"number\" placeholder=\"Incentivo\" onChange={linkState(this, 'incentivo')} />\n        <button onClick={this.handleClick} > Siguiente</button>\n      </div>\n    )\n  }\n}\n\nexport default IngresosNoFijos","import { Component, h } from \"preact\";\nimport linkState from \"linkstate\";\n\nclass DeduccionNoFija extends Component {\n  constructor() {\n    super()\n    this.state = {\n      deduccionHorasRetraso: 0\n    }\n    this.handleSubmit = this.handleSubmit.bind(this)\n  }\n  handleSubmit() {\n    this.props.crearDeduccionNoFija(this.state)\n  }\n  render() {\n    return (\n      <div>\n        <label for=\"deduccionHorasRetraso\">Deduccion Horas Retraso</label>\n        <input type=\"number\" name=\"deduccionHorasRetraso\" placeholder=\"Deduccion Horas Retraso\" onChange={\n          linkState(this, 'deduccionHorasRetraso')\n        }></input>\n      </div>\n    )\n  }\n}\n\nexport default DeduccionNoFija","import { Component, h } from 'preact'\nimport linkState from 'linkstate'\nimport NominaTrabajador from './NominaTrabajador';\nimport IngresosNoFijo from './ingresosNoFijos';\nimport DeduccionNoFija from './Deduccion';\n\nclass TrabajadorNomina extends Component {\n  constructor() {\n    super()\n    this.state = {\n      fecha: new Date(),\n      mes: new Date().getMonth(),\n      paso: 0,\n      idNomina: 0,\n      idDeduccion: 0,\n      calIngresoNoFijo: {\n        horasExtra: 0,\n        valorVentas: 0\n      }\n    }\n    this.crearNominaTrabajador = this.crearNominaTrabajador.bind(this)\n    this.getHorasJornadaTrabajador = this.getHorasJornadaTrabajador.bind(this)\n    this.generarIngresosNoFijos = this.generarIngresosNoFijos.bind(this)\n  }\n\n\n\n  crearNominaTrabajador({ horasTrabajadas, horasExtra, valorVentas }) {\n    const { idTrabajador, salarioPorHora, salario, porcentajeComision } = this.props.trabajador\n    const { periodo } = this.props\n    const salarioNumero = Number.parseFloat(salario)\n    const salarioPagado = salarioPorHora != 1 ? salarioNumero : salarioNumero * horasTrabajadas\n    const { fecha } = this.state\n    const reqBody = {\n      idTrabajador,\n      idPeriodoPago: periodo,\n      fechaDeEmision: fecha.toISOString().slice(0, 10),\n      salarioPagado\n    }\n\n    fetch('http://localhost:3000/api/nomina/create', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(reqBody)\n    }).then(res => res.json())\n      .then(data => {\n        console.log(\"Nomina\")\n        console.log(data)\n        this.setState((prevState) => ({\n          paso: ++prevState.paso,\n          idNomina: data.idNomina,\n          calIngresoNoFijo: {\n            horasExtra,\n            valorVentas\n          }\n\n        }), () => console.log(this.state))\n      })\n      .catch(e => console.log(e))\n\n  }\n  getHorasJornadaTrabajador() {\n\n    return fetch(`http://localhost:3000/api/trabajador/${this.props.trabajador.idTrabajador}?nomina=true`)\n      .then(res => res.json())\n      .then(data => {\n        let dates = data.map(el => {\n          const horaEntrada = new Date()\n          const horaSalida = new Date()\n          horaSalida.setHours(...(el.horaSalida.split(\":\")))\n          horaEntrada.setHours(...(el.horaEntrada.split(\":\")))\n          return horaSalida.getHours() - horaEntrada.getHours()\n        })\n        const jornadaLaboral = dates.reduce((acc, cur) => acc + cur, 0)\n        console.log(\"Jornadas Laboral\" + jornadaLaboral)\n        return jornadaLaboral\n      })\n  }\n\n  generarIngresosNoFijos({ viatico, incentivo }) {\n    const { idNomina, calIngresoNoFijo } = this.state\n    const { salario, porcentajeComision } = this.props.trabajador\n    console.log(porcentajeComision)\n    console.log(\"Incentivo 1 \")\n    console.log(incentivo)\n    let idIngresoNoFijo\n    // Fetch para crear los ingresos no Fijos (viatico, incentivo y pagoHorasExtras)\n    this.getHorasJornadaTrabajador()\n      .then(horasJornada => {\n        const salarioHorasExtra = Number.parseFloat(salario) / (horasJornada * 30)\n        const pagoHorasExtras = Number.parseFloat((calIngresoNoFijo.horasExtra * (2 * salarioHorasExtra)).toFixed(2))\n        console.log(\"Incentivo 2 \")\n        console.log(incentivo)\n        fetch(\"http://localhost:3000/api/nomina/ingresosNoFijos\", {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            idNomina,\n            viatico,\n            incentivo,\n            pagoHorasExtras\n          })\n        }).then(res => res.json())\n          .then(data => {\n            console.log(data)\n            console.log(porcentajeComision)\n            if (porcentajeComision) {\n              this.generarIngresosNoFijosVendedor(data)\n            } else {\n              this.generarDeducciones()\n            }\n            return;\n          })\n          .catch(e => console.log(e))\n\n      })\n\n\n  }\n  generarIngresosNoFijosVendedor({ idIngresoNoFijo }) {\n    const { porcentajeComision } = this.props.trabajador\n    const { valorVentas } = this.state.calIngresoNoFijo\n    console.log(\"IngresosNoFijoVendedor\")\n    console.log(porcentajeComision)\n    console.log(valorVentas)\n\n    fetch(\"http://localhost:3000/api//nomina/ingresosNoFijos/vendedor\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        idIngresoNoFijo,\n        pagaDeComision: valorVentas * (porcentajeComision / 100)\n      })\n    }).then(res => res.json())\n      .then(data => {\n        if (data.idIngresoNoFijo) this.generarDeducciones()\n      })\n\n  }\n  generarDeducciones() {\n    let { salario, idTrabajador, frecuenciaDePago } = this.props.trabajador\n    const { idNomina } = this.state\n    salario = Number.parseFloat(salario)\n    let value = (salario * 0.625).toFixed(2)\n    const inss = Number.parseFloat(value)\n    const requestBody = {\n      inss,\n      salario,\n      idTrabajador,\n      idNomina,\n      frecuenciaDePago\n    }\n    console.log(requestBody)\n    console.log(`Salario ${typeof salario} , idTrabajador ${typeof idTrabajador}\n     frecuenciaDePago ${typeof frecuenciaDePago}`)\n    fetch(\"http://localhost:3000/api/nomina/deduccion\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      // { idNomina, inss, idTrabajador, salario, frecuenciaDePago }\n      body: JSON.stringify(requestBody)\n    })\n      .then(res => res.json())\n      .then(data => this.setState({\n        paso: ++prevState.paso,\n        idDeduccion: data.idDeduccion\n      }))\n\n  }\n  generarDeduccionesNoFijas({ deduccionHorasRetraso }) {\n    const { idDeduccion } = this.state\n    fetch(\"http://localhost:3000/api/nomina/deduccionNoFija\", {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        idDeduccion,\n        deduccionHorasRetraso\n      }).then(res => res.json())\n        .then(data => console.log(data.idDedducionNoFijo))\n        .catch(e => console.log(e))\n    })\n  }\n\n  generarDeduccionesPrestamos() {\n    const { idTrabajador } = this.props.trabajador\n    fetch(`http://localhost:3000/api/prestamo/trabajador/${idTrabajador}`)\n      .then(res => res.json())\n      .then(data => {\n        if (data.length > 0) {\n          /*Todo */\n\n        }\n      })\n  }\n\n  render({ trabajador, next }, { paso }) {\n    const { nombre, apellido, cargo, porcentajeComision } = trabajador\n    let pasoActual\n    switch (paso) {\n      case 0:\n        pasoActual = <NominaTrabajador porcentajeComision={porcentajeComision} crearNomina={this.crearNominaTrabajador} />\n        break;\n      case 1: {\n        pasoActual = <IngresosNoFijo crearIngresosNoFijos={this.generarIngresosNoFijos} porcentajeComision={porcentajeComision} />\n        break;\n      }\n      case 2: {\n        pasoActual = <DeduccionNoFija crearDeduccionNoFija={this.generarDeduccionesNoFijas} />\n      }\n\n    }\n    return (\n      <div>\n        <h2>{`${nombre} ${apellido}`}</h2>\n        <h4>{cargo}</h4>\n        {pasoActual}\n      </div>)\n  }\n}\n\nexport default TrabajadorNomina","import { Component, h } from 'preact'\nimport CrearNomina from './CrearNomina'\nimport GenerarPeriodo from './GenerarPeriodo'\nimport TrabajadorNomina from './TrabajadorNomina'\n\n\nclass ComponenteNomina extends Component {\n  constructor() {\n    super()\n    this.state = {\n      frecuenciaDePago: '',\n      paso: 0,\n      indiceTrabajadorActual: 0,\n      listaTrabajadores: [],\n      Periodo: {\n        idPeriodo: 0,\n        inicioPeriodo: 0,\n        finPeriodo: 0\n      }\n\n    }\n    this.avanzarPaso = this.avanzarPaso.bind(this)\n    this.setFrecuenciaDePago = this.setFrecuenciaDePago.bind(this)\n    this.setPeriodoPago = this.setPeriodoPago.bind(this)\n    this.queryTrabajadores = this.queryTrabajadores.bind(this)\n  }\n  avanzarPaso() {\n    this.setState((prevState) => ({\n      paso: ++prevState.paso\n    }))\n  }\n  avanzarTrabajador() {\n    this.setState((prevState) => ++prevState.indiceTrabajadorActual, () => {\n      if (this.state.indiceTrabajadorActual >= listaTrabajadores.length) this.avanzarPaso()\n    })\n  }\n\n  setFrecuenciaDePago(frecuenciaDePago) {\n    this.setState({ frecuenciaDePago }, () => this.avanzarPaso())\n  }\n\n  setPeriodoPago(Periodo) {\n    this.setState({ Periodo }, () => this.queryTrabajadores())\n  }\n  queryTrabajadores() {\n    const { frecuenciaDePago, Periodo: { inicioPeriodo, finPeriodo } } = this.state\n\n    console.log(\"Cargando Trabajadores\")\n    fetch(\"http://localhost:3000/api/crearNomina/trabajadores\", {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        frecuenciaDePago,\n        inicio: new Date(...(inicioPeriodo.split(\"-\"))).getDate(),\n        fin: new Date(...(finPeriodo.split(\"-\"))).getDate()\n      })\n\n    })\n      .then(res => res.json())\n      .then(data => {\n        console.log(data)\n        this.setState({\n          listaTrabajadores: data\n        }, this.avanzarPaso())\n      }).catch()\n  }\n  render(props, { frecuenciaDePago,\n    paso,\n    indiceTrabajadorActual,\n    listaTrabajadores,\n    Periodo }\n  ) {\n    let pasoActual\n    switch (paso) {\n      case 0: {\n        pasoActual = <CrearNomina setFrecuencia={this.setFrecuenciaDePago} />\n        break;\n      }\n      case 1: {\n        pasoActual = <GenerarPeriodo setPeriodo={this.setPeriodoPago} />\n        break;\n      }\n      case 2: {\n        console.log(this.state)\n        pasoActual = <TrabajadorNomina trabajador={listaTrabajadores[indiceTrabajadorActual]} next={this.avanzarTrabajador} periodo={Periodo.idPeriodoPago} />\n        break;\n      }\n    }\n\n    return (\n      <section >\n        {pasoActual}\n      </section>\n    )\n\n  }\n}\n\nexport default ComponenteNomina"]}